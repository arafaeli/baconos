#!/usr/bin/env python

import yaml
import sys
import os

def write_desc(d):
    print(f"gdt_{d['name']}:")
    print(f"  dw {hex(d['limit'] & 0xffff)}")
    print(f"  dw {hex(d['base'] & 0xffff)}")
    print(f"  db {hex((d['base'] >> 16) & 0xff)}")

    a = d['access']
    access = 0x00000000 | \
                a['pr'] << 7 | \
                a['priv'] << 6 | \
                1 << 4 | \
                a['ex'] << 3 | \
                a['dc'] << 2 | \
                a['rw'] << 1 | \
                a['ac']

    print(f"  db {bin(access)[2:]}b")

    limit_flags = d['limit'] >> 16 | \
                    d['flags']['gr'] << 7 | d['flags']['sz'] << 6
    limit_flags &= 0xff;

    print(f"  db {bin(limit_flags)[2:].zfill(8)}b")
    print(f"  db {hex((d['base'] >> 24) & 0xff)}")
    print()

def write_null():
    print('gdt_null:')
    print('dd 0')
    print('dd 0')
    print()

def main():
    with open(sys.argv[1], 'r') as f:
        table = yaml.load(f)

    print("; Generated by baconOS GDT script")

    print("gdt_start:\n")
    write_null()
    for desc in table['descriptors']:
        write_desc(desc)
    print("gdt_end:\n")

    print("gdt_descriptor:")
    print("  dw gdt_end - gdt_start - 1  ; GDT size")
    print("  dd gdt_start  ; GDT offset")
    print()

    print("; Segment offset constants")
    for desc in table['descriptors']:
        name = desc['name']
        print(f"{name.upper()}_SEG equ gdt_{name} - gdt_start")


if __name__ == '__main__':
    main()
